{"version":3,"file":"sidepanel.js","mappings":";;;;;;;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://alphajxiv/./src/sidepanel.js"],"sourcesContent":["// src/sidepanel.js (Final Version - Replace Entire File)\n\n// --- 1. UI Rendering Functions ---\nfunction renderTitle(title) {\n  const titleEl = document.getElementById('paper_title');\n  if (titleEl) {\n    titleEl.textContent = title || 'Loading title...';\n  }\n}\n\nfunction renderComments(comments) {\n  const commentsList = document.getElementById('comments_list');\n  if (!commentsList) return;\n  commentsList.innerHTML = '';\n  if (!comments || comments.length === 0) {\n    commentsList.innerHTML = '<p>No comments yet.</p>';\n    return;\n  }\n  for (const comment of comments) {\n    const div = document.createElement('div');\n    div.className = 'comment';\n    // Display the author's email along with the comment\n    const authorHTML = comment.author ? `<strong class=\"author\">${escapeHTML(comment.author)}</strong>` : '';\n    div.innerHTML = `${authorHTML}<p>${escapeHTML(comment.text)}</p><span class=\"timestamp\">${escapeHTML(comment.timestamp)}</span>`;\n    commentsList.prepend(div);\n  }\n}\n\n// **MODIFIED**: This function now controls the login button's visibility\nfunction renderAuth(auth) {\n  const authEl = document.getElementById('user-status');\n  const loginBtn = document.getElementById('login_button');\n  const commentForm = document.getElementById('comment_form');\n\n  if (authEl && loginBtn && commentForm) {\n    if (auth) {\n      authEl.textContent = `Logged in as: ${auth.email}`;\n      loginBtn.style.display = 'none'; // Hide login button\n      commentForm.style.display = 'flex'; // Show comment form\n    } else {\n      authEl.textContent = 'You must be logged in to comment.';\n      loginBtn.style.display = 'block'; // Show login button\n      commentForm.style.display = 'none'; // Hide comment form\n    }\n  }\n}\n\nfunction escapeHTML(str) {\n    const p = document.createElement('p');\n    p.appendChild(document.createTextNode(str || ''));\n    return p.innerHTML;\n}\n\n// --- 2. Main Update Function ---\nfunction updateUI(state) {\n  if (!state) return;\n  renderTitle(state.paperTitle);\n  renderComments(state.comments);\n  renderAuth(state.auth);\n}\n\n// --- 3. Communication and Event Handlers ---\ndocument.addEventListener('DOMContentLoaded', () => {\n  // When the side panel opens, ask for the current state.\n  chrome.runtime.sendMessage({ type: 'GET_INITIAL_STATE' }, (response) => {\n    if (response && response.data) {\n      console.log(\"Side Panel: Received initial state:\", response.data);\n      updateUI(response.data);\n    }\n  });\n\n  // Listen for all future state pushes from the service worker.\n  chrome.runtime.onMessage.addListener((message) => {\n    if (message.type === 'STATE_UPDATE' && message.data) {\n      console.log(\"Side Panel: Received state update:\", message.data);\n      updateUI(message.data);\n    }\n  });\n\n  // Handle comment submission\n  const commentForm = document.getElementById('comment_form');\n  if (commentForm) {\n    commentForm.addEventListener('submit', (e) => {\n      e.preventDefault();\n      const commentText = document.getElementById('comment_text');\n      if (commentText && commentText.value.trim() !== '') {\n        chrome.runtime.sendMessage({ type: 'ADD_COMMENT', text: commentText.value.trim() }, (response) => {\n          if (response && response.success) {\n            commentText.value = '';\n          } else {\n            alert(`Error posting comment: ${response ? response.error : 'No response'}`);\n          }\n        });\n      }\n    });\n  }\n\n  // **ADDED**: Event listener for the new login button\n  const loginButton = document.getElementById('login_button');\n  if (loginButton) {\n    loginButton.addEventListener('click', () => {\n      loginButton.textContent = \"Logging in...\";\n      loginButton.disabled = true;\n      // This message triggers the authentication flow in the service worker\n      chrome.runtime.sendMessage({ type: 'REQUEST_AUTH_STATE' }, (response) => {\n        // The UI update is handled by the 'STATE_UPDATE' listener.\n        // We only need to handle the failure case here.\n        if (!response || !response.success) {\n          alert(`Login failed: ${response ? response.error : 'Unknown error'}`);\n          loginButton.textContent = \"Login with Google\";\n          loginButton.disabled = false;\n        }\n      });\n    });\n  }\n});"],"names":[],"sourceRoot":""}