{"version":3,"file":"offscreen.js","mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA","sources":["webpack://alphajxiv/./src/offscreen.js"],"sourcesContent":["// This URL must point to the public site\n    const _URL = 'https://alphajxivextended.firebaseapp.com';\n    const iframe = document.createElement('iframe');\n    iframe.src = _URL;\n    document.documentElement.appendChild(iframe);\n    chrome.runtime.onMessage.addListener(handleChromeMessages);\n\n    function handleChromeMessages(message, sender, sendResponse) {\n      if (message.target !== 'offscreen') {\n        return false;\n      }\n\n      if (message.type === 'firebase-auth') {\n        // Create a response promise to handle the auth flow\n        const responsePromise = new Promise((resolve, reject) => {\n          let timeoutId;\n\n          const handleIframeMessage = ({data}) => {\n            try {\n              if (typeof data === 'string' && data.startsWith('!_{')) {\n                return; // Ignore Firebase internal messages\n              }\n              \n              const parsedData = typeof data === 'string' ? JSON.parse(data) : data;\n              globalThis.removeEventListener('message', handleIframeMessage);\n              clearTimeout(timeoutId);\n              resolve(parsedData);\n            } catch (e) {\n              console.error('Error handling iframe message:', e);\n              clearTimeout(timeoutId);\n              reject(e);\n            }\n          };\n\n          globalThis.addEventListener('message', handleIframeMessage);\n          \n          // Initialize auth flow with a timeout\n          try {\n            iframe.contentWindow.postMessage({\"initAuth\": true}, new URL(_URL).origin);\n          } catch (e) {\n            clearTimeout(timeoutId);\n            reject(new Error('Failed to initiate auth flow: ' + e.message));\n          }\n\n          timeoutId = setTimeout(() => {\n            globalThis.removeEventListener('message', handleIframeMessage);\n            reject(new Error('Auth flow timed out'));\n          }, 30000);\n        });\n\n        // Handle the response\n        responsePromise\n          .then(authData => {\n            console.log('Auth flow completed successfully');\n            // Send response back through the message channel\n            chrome.runtime.sendMessage({\n              type: 'firebase-auth-response',\n              auth: authData\n            });\n            sendResponse({ success: true });\n          })\n          .catch(error => {\n            console.error('Auth flow failed:', error);\n            sendResponse({ error: error.message });\n          });\n\n        return true; // Indicates we will send a response asynchronously\n      }\n\n      return false;\n    }\n"],"names":[],"sourceRoot":""}